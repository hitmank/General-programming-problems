Swift:

Collections : Array, Set and Dictionary.

Mutability of Collections :
If you create an array, a set, or a dictionary, and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it‚Äôs created by adding, removing, or changing items in the collection. If you assign an array, a set, or a dictionary to a constant, that collection is immutable, and its size and contents cannot be changed.

Array:

		1. Array<Element> or [Element]

			eg: var abc = [Int]() or Array<Int>()

		2. Empty array : 

			[Int]() or [] (If type is already mentioned)

		3. Array with default value : 
			
			var arr = Array(repeating: 0, count: 10)

		4. Append 2 arrays (of same type):
			
			var arr = arr1 + arr2

		5. Create with elements :

			var arr = ["a","b","c"]

		6. Number of elements in array :
			
			arr.count

		7. Check if Empty
			
			arr.count == 0 or arr.isEmpty

		8. Append:

			arr.append("h") or arr += ["h","g"]

		9. Update:
			
			arr[6] = "new"
			shoppingList[4...6] = ["Bananas", "Apples"] -> Replaces whatever is in the range 4 to 6, with 2 elements. So it reduces the size here.

		10. Insert:
			
			arr.insert("haha", at: 5)

		11. Remove:
			
			arr.remove(at: 4)

		12. Iterating:
			
			for element in arr{

			}

			or

			for (index, element) in arr.enumerated(){

			}


Set:


	Hash Values for Set Types:
	A type must be hashable in order to be stored in a set‚Äîthat is, the type must provide a way to compute a hash value for itself. A hash value is an Int value that is the same for all objects that compare equally, such that if a == b, it follows that a.hashValue == b.hashValue.

	NOTE

	You can use your own custom types as set value types or dictionary key types by making them conform to the Hashable protocol from Swift‚Äôs standard library. Types that conform to the Hashable protocol must provide a gettable Int property called hashValue. The value returned by a type‚Äôs hashValue property is not required to be the same across different executions of the same program, or in different programs.

	Because the Hashable protocol conforms to Equatable, conforming types must also provide an implementation of the equals operator (==). The Equatable protocol requires any conforming implementation of == to be an equivalence relation. That is, an implementation of == must satisfy the following three conditions, for all values a, b, and c:

	a == a (Reflexivity)

	a == b implies b == a (Symmetry)

	a == b && b == c implies a == c (Transitivity)


	1. Set<Element>

		var abc = Set<Character>()

	2. Empty Set :

		var abc = [] ->If type has already been set

	3. Creating with values:

		var abc : Set = ["a", "b", "c"] or var abc : Set<String> = ["a", "b"]

	4. Number of elements in a Set :
			
		abc.count

	5. Check if Empty
			
		arr.count == 0 or arr.isEmpty

	6. Insert:

		abc.insert("elem")

	7. Remove:

		if let removedGenre = favoriteGenres.remove("Rock") {
	   		print("\(removedGenre)? I'm over it.")
		} else {
	    	print("I never much cared for that.")
		}

	8. Contains:

		if favoriteGenres.contains("Funk") {
		    print("I get up on the good foot.")
		} else {
		    print("It's too funky in here.")
		}
	
	9. Iterate:

		for element in arr{

		}

		or

		for element in arr.sorted() {

		}    

	10. Set operations : Union, Intersection, Substract and Symmetric Difference

			let oddDigits: Set = [1, 3, 5, 7, 9]
			let evenDigits: Set = [0, 2, 4, 6, 8]
			let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]
		 
			oddDigits.union(evenDigits).sorted()
			// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
			oddDigits.intersection(evenDigits).sorted()
			// []
			oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
			// [1, 9]
			oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
			// [1, 2, 9]

	11. Other Set operations :
			Use the ‚Äúis equal‚Äù operator (==) to determine whether two sets contain all of the same values.

			Use the isSubset(of:) method to determine whether all of the values of a set are contained in the specified set.

			Use the isSuperset(of:) method to determine whether a set contains all of the values in a specified set.

			Use the isStrictSubset(of:) or isStrictSuperset(of:) methods to determine whether a set is a subset or superset, but not equal to, a specified set.

			Use the isDisjoint(with:) method to determine whether two sets have no values in common.

			let houseAnimals: Set = ["üê∂", "üê±"]
			let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
			let cityAnimals: Set = ["üê¶", "üê≠"]
			 
			houseAnimals.isSubset(of: farmAnimals)
			// true
			farmAnimals.isSuperset(of: houseAnimals)
			// true
			farmAnimals.isDisjoint(with: cityAnimals)
			// true

Dictionaries:

	1. Dictionary<Key, Value> or [Key : Value]

		var abc = Dictionary<Int, Int>() or var abc = [Int : Int]()

	2. Empty:

		var abc = [:] -> If type is specified.

	3. Creating:

		var abc = [5 : "Karan", 6: "aa"] or var abc : [Int, String] = [5 : "Karan", 6: "aa"]

	4. Number of elements in a Dict :
			
		abc.count

	5. Check if Empty
			
		arr.count == 0 or arr.isEmpty

	6. Insert into Dict:

		dict[3] = "abc"

		or

		Update Value:

		the updateValue(_:forKey:) method sets a value for a key if none exists, or updates the value if that key already exists. Unlike a subscript, however, the updateValue(_:forKey:) method returns the old value after performing an update. This enables you to check whether or not an update took place.

		if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
   			print("The old value for DUB was \(oldValue).")
		}

	7. Get a value:

		if let val = abc[5]{

		}
	
	8. Remove a value:

		Set value to nil:

			abc[6] = nil

		or: Remove value for key

			abc.removeValue(forKey: 5)

	9. Iterate:

		for (key, value) in abc{

		}
		or
		for key in abc.keys {

		}
		or
		for value in abc.values{

		}

	10. Create an array out of keys or values:

		var arr = [String](abc.values)
		var arr = [Int](abc.keys)	









